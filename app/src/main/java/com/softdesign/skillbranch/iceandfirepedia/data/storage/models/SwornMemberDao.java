package com.softdesign.skillbranch.iceandfirepedia.data.storage.models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHARACTERS".
*/
public class SwornMemberDao extends AbstractDao<SwornMember, Long> {

    public static final String TABLENAME = "CHARACTERS";

    /**
     * Properties of entity SwornMember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ApiId = new Property(1, long.class, "apiId", false, "API_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Born = new Property(3, String.class, "born", false, "BORN");
        public final static Property Died = new Property(4, String.class, "died", false, "DIED");
        public final static Property Father = new Property(5, Long.class, "father", false, "FATHER");
        public final static Property Mother = new Property(6, Long.class, "mother", false, "MOTHER");
        public final static Property BookId = new Property(7, Long.class, "bookId", false, "BOOK_ID");
        public final static Property HouseRemoteId = new Property(8, Long.class, "houseRemoteId", false, "HOUSE_REMOTE_ID");
    };

    private DaoSession daoSession;

    private Query<SwornMember> house_SwornMembersQuery;

    public SwornMemberDao(DaoConfig config) {
        super(config);
    }
    
    public SwornMemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHARACTERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"API_ID\" INTEGER NOT NULL UNIQUE ," + // 1: apiId
                "\"NAME\" TEXT," + // 2: name
                "\"BORN\" TEXT," + // 3: born
                "\"DIED\" TEXT," + // 4: died
                "\"FATHER\" INTEGER," + // 5: father
                "\"MOTHER\" INTEGER," + // 6: mother
                "\"BOOK_ID\" INTEGER," + // 7: bookId
                "\"HOUSE_REMOTE_ID\" INTEGER);"); // 8: houseRemoteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHARACTERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SwornMember entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getApiId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String born = entity.getBorn();
        if (born != null) {
            stmt.bindString(4, born);
        }
 
        String died = entity.getDied();
        if (died != null) {
            stmt.bindString(5, died);
        }
 
        Long father = entity.getFather();
        if (father != null) {
            stmt.bindLong(6, father);
        }
 
        Long mother = entity.getMother();
        if (mother != null) {
            stmt.bindLong(7, mother);
        }
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(8, bookId);
        }
 
        Long houseRemoteId = entity.getHouseRemoteId();
        if (houseRemoteId != null) {
            stmt.bindLong(9, houseRemoteId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SwornMember entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getApiId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String born = entity.getBorn();
        if (born != null) {
            stmt.bindString(4, born);
        }
 
        String died = entity.getDied();
        if (died != null) {
            stmt.bindString(5, died);
        }
 
        Long father = entity.getFather();
        if (father != null) {
            stmt.bindLong(6, father);
        }
 
        Long mother = entity.getMother();
        if (mother != null) {
            stmt.bindLong(7, mother);
        }
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(8, bookId);
        }
 
        Long houseRemoteId = entity.getHouseRemoteId();
        if (houseRemoteId != null) {
            stmt.bindLong(9, houseRemoteId);
        }
    }

    @Override
    protected final void attachEntity(SwornMember entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SwornMember readEntity(Cursor cursor, int offset) {
        SwornMember entity = new SwornMember( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // apiId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // born
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // died
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // father
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // mother
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // bookId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // houseRemoteId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SwornMember entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setApiId(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBorn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDied(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFather(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMother(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setBookId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setHouseRemoteId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SwornMember entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SwornMember entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "swornMembers" to-many relationship of House. */
    public List<SwornMember> _queryHouse_SwornMembers(Long houseRemoteId) {
        synchronized (this) {
            if (house_SwornMembersQuery == null) {
                QueryBuilder<SwornMember> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HouseRemoteId.eq(null));
                house_SwornMembersQuery = queryBuilder.build();
            }
        }
        Query<SwornMember> query = house_SwornMembersQuery.forCurrentThread();
        query.setParameter(0, houseRemoteId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBookDao().getAllColumns());
            builder.append(" FROM CHARACTERS T");
            builder.append(" LEFT JOIN BOOKS T0 ON T.\"BOOK_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SwornMember loadCurrentDeep(Cursor cursor, boolean lock) {
        SwornMember entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Book lastBook = loadCurrentOther(daoSession.getBookDao(), cursor, offset);
        entity.setLastBook(lastBook);

        return entity;    
    }

    public SwornMember loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SwornMember> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SwornMember> list = new ArrayList<SwornMember>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SwornMember> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SwornMember> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
